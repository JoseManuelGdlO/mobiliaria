# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'
          #cache: 'npm'

      - name: npm install, build, and test
        run: |
          cd backend/api
          npm install
          npm run build --if-present


  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.ID_SG_GHA_EVENTIVA }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_JMANUEL_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_JMANUEL_SECRET_KEY }}
          aws-region: us-east-1
      - name: Get Runner IP Address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: Whitelist Runner IP Address on SG
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - uses: actions/checkout@v2
      - name: Where am I and Who I am
        run: |
          pwd
          ls -la
      - name: Move one up
        run: |
          cd ..
          ls -la
          pwd
      - name: Deploy Backend to Server
        #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "backend/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          SCRIPT_BEFORE: |
            ls
            pwd
          SCRIPT_AFTER: |
            cd backend/api
            npm install
            sudo systemctl restart backend
            pm2 restart all
            ls
            pwd
      - name: Revoke Runner IP Address on SG
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
